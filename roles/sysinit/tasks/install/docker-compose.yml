---
- name: Docker-Compose - Exists
  stat:
    path: /usr/local/bin/docker-compose
  register: docker_compose_exists_result

- block:
    - name: Docker-Compose - Get installed version
      command: docker-compose --version
      register: docker_compose_version_result

    - name: Docker-Compose - Set installed version
      set_fact:
        docker_compose_installed_version: "{{ docker_compose_version_result.stdout | regex_search(regexp,'\\1') }}"
      vars:
        regexp: 'docker-compose version\s(.*),.*$'

    - name: "Docker-Compose - Debug: Installed version"
      debug:
        msg: "{{ docker_compose_installed_version }}"
      when: debug == true
  when: docker_compose_exists_result.stat.exists != false and upgrade == true

- block:
    - name: Docker-Compose - Get latest 
      community.general.github_release:
        user: docker
        repo: compose
        action: latest_release
        # token: "{{ github_token }}"
      register: docker_compose_latest_version

    - name: Docker-Compose - Set latest version
      set_fact:
        docker_compose_latest_version: "{{ docker_compose_latest_version.tag }}"

    - name: "Docker-Compose - Debug:  Latest version"
      debug:
        msg: "{{ docker_compose_latest_version }}"
      when: debug == true
  when: docker_compose_exists_result.stat.exists == false or upgrade == true
  
- name: Docker-Compose - Install/Upgrade
  get_url:
    url: "https://github.com/docker/compose/releases/download/{{ docker_compose_latest_version }}/docker-compose-{{ ansible_system }}-{{ ansible_userspace_architecture }}"
    dest: /usr/local/bin/docker-compose
    mode: 'u+x,g+x,o+x'
    force: true
  when: (docker_compose_exists_result.stat.exists == false) or upgrade == true and (docker_compose_installed_version != docker_compose_latest_version)
