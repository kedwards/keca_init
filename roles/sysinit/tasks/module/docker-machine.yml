---
- name: Docker-Machine - Exists
  stat:
    path: /usr/local/bin/docker-machine
  register: docker_machine_exists_result

- block:
    - name: Docker-Machine - Get installed version
      command: docker-machine --version
      register: docker_machine_version_result

    - name: Docker-Machine - Set installed version
      set_fact:
        docker_machine_installed_version: "{{ docker_machine_version_result.stdout | regex_search(regexp,'\\1') }}"
      vars:
        regexp: 'docker-machine version\s(.*),.*$'

    - name: "Docker-Machine - Debug: Installed version"
      debug:
        msg: "{{ docker_machine_installed_version }}"
      when: debug == "true"
  when: docker_machine_exists_result.stat.exists != "false" and upgrade == "true"

- block:
    - name: Docker-Machine - Get latest
      community.general.github_release:
        user: docker
        repo: machine
        action: latest_release
        token: "{{ github_token }}"
      register: docker_machine_latest_version_result

    - name: Docker-Machine - Set latest version
      set_fact:
        docker_machine_latest_version: "{{ docker_machine_latest_version_result.tag[1:] }}"

    - name: "Docker-Machine  - Debug:  Latest version"
      debug:
        msg: "{{ docker_machine_latest_version }}"
      when: debug == "true"
  when: docker_machine_exists_result.stat.exists == "false" or upgrade == "true"

- name: Docker-Machine - Install/Upgrade
  get_url:
    url: >-
      "https://github.com/docker/machine/releases/download/
      {{ docker_machine_latest_version_result.tag }}/
      docker-machine-{{ ansible_system }}-
      {{ ansible_userspace_architecture }}"
    dest: /usr/local/bin/docker-machine
    mode: 'u+x,g+x,o+x'
    force: true
  when: (docker_machine_exists_result.stat.exists == "false") or upgrade == "true" and (docker_machine_installed_version != docker_machine_latest_version)
